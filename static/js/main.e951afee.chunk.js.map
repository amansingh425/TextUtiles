{"version":3,"sources":["templates/navbar.js","templates/area.js","templates/about.js","templates/alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","aria-checked","onClick","toggleMode","htmlFor","defaultProps","TextAreaTo","words","nwords","text","split","length","_useState","useState","_useState2","_slicedToArray","setText","Fragment","style","color","value","onChange","event","target","backgroundColor","height","newtext","toUpperCase","showAlert","toLowerCase","join","navigator","clipboard","writeText","toFixed","About","mystyle","setMyStyle","_useState3","_useState4","btntext","setBtnText","data-bs-parent","Alert","alert","word","nwrd","at","slice","capitalise","massage","App","setMode","setAlert","msg","setTimeout","Router","document","body","setInterval","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e951afee.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\n     function  Navbar (props) {\r\n      return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\" />\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">About</Link>\r\n                </li>\r\n              </ul>\r\n              <div className={`form-check form-switch text-${props.mode==='dark'? 'light': 'dark'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" aria-checked id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode==='dark'? 'Light': 'Dark'} mode</label>\r\n</div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      );\r\n    }\r\n\r\n    Navbar.propTypes = {\r\n        title: PropTypes.string,\r\n        mode: PropTypes.string\r\n      };\r\n\r\n      Navbar.defaultProps = {\r\n        title: \"TextUtiles\",\r\n        mode: \"light\"\r\n      }\r\n\r\n        export default Navbar;","import React, {useState} from 'react'\r\nexport default function TextAreaTo (props){\r\n \r\n  const words = ()=>{\r\n    let nwords = text.split(/ +/).length;\r\n    if(text===\"\"){\r\n        nwords = 0;\r\n    }\r\n   return nwords;\r\n  }\r\n const handleTextChange = (event)=>{\r\n   setText(event.target.value);\r\n }\r\n const handleClickTU = ()=>{\r\n let newtext = text.toUpperCase();\r\n setText(newtext);\r\n props.showAlert('success', 'converted to uppercase');\r\n }\r\n const handleClickTl = ()=>{\r\n  let newtext = text.toLowerCase();\r\n setText(newtext);\r\n props.showAlert('success', 'converted to lowercase');\r\n }\r\n\r\nconst handleClickClear = ()=>{\r\n  setText(\"\");\r\n\r\n}\r\n\r\nconst handleSpaces =()=>{\r\nlet newtext =  text.split(/ +/);\r\nsetText(newtext.join(\" \"));\r\nprops.showAlert('success', 'Extra spaces removed');\r\n}\r\n\r\n\r\nconst handleCopyTxt = ()=>{\r\n  navigator.clipboard.writeText(text);\r\n  props.showAlert('success', 'Text is copied to clipboard');\r\n}\r\n const [text, setText] = useState(\"Enter text here\");\r\n\r\n    return(\r\n        <>\r\n        <div className='container my-5' style={{color:props.mode==='dark'? 'white': 'black'}}>\r\n          <h2>Enter text To analyse below</h2>\r\n        <div className=\"form-floating\">\r\n  <textarea className=\"form-control\"   id=\"floatingTextarea\" value={text} onChange={handleTextChange} style={{color:props.mode==='dark'? 'white': 'black', backgroundColor:props.mode==='dark'? '#1d2d56': 'white',  height: '21rem' }}></textarea>\r\n</div>\r\n<button className=\"btn btn-primary my-3\" onClick={handleClickTU}>text to uparcase</button>\r\n<button className=\"btn btn-primary my-3 mx-3\" onClick={handleClickTl}>text to lowercase</button>\r\n<button className=\"btn btn-primary my-3 mx-3\" onClick={handleClickClear}>clear</button>\r\n<button className=\"btn btn-primary my-3 mx-3\" onClick={handleSpaces}>Remove spaces</button>\r\n<button className=\"btn btn-primary my-3 mx-3\" onClick={handleCopyTxt}>copy text</button>\r\n\r\n<p className='my-3 mx-5'>{text.length} characters and {words()} words</p>\r\n<p className='my-3 mx-5'>fast reading time {(0.008*words()).toFixed(3)}min , slow reading time {(0.022*words()).toFixed(3)}min</p>\r\n<p className='my-3 mx-5'>Preview the text</p>\r\n<p className='my-3 mx-5 text-success'>{text}</p>\r\n</div> \r\n        </>\r\n    );\r\n }","import  React ,{useState} from 'react'\r\n export default function About(){\r\n   \r\n    const changeMode = ()=>{\r\n           if(mystyle.color === 'white'){\r\n             setMyStyle({color: 'black',\r\n             backgroundColor: 'white'});\r\n             setBtnText(\"Enable DarkMode\");\r\n           }\r\n           else{\r\n            setMyStyle({color: 'white',\r\n            backgroundColor: 'black'});\r\n            setBtnText(\"Enable Lightmode\");\r\n           }\r\n    }\r\n    const [mystyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n        });\r\n\r\n        const [btntext, setBtnText] = useState(\"Enable Darkmode\");\r\n    \r\n      return (\r\n      <>\r\n      <div className='container'>\r\n      <div className='container my-5' style={mystyle}>\r\n        <div className=\"accordion accordion-flush\" id=\"accordionFlushExample\" style={mystyle}>\r\n          <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\">\r\n              <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseOne\" aria-expanded=\"false\" aria-controls=\"flush-collapseOne\" style={mystyle}>\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div id=\"flush-collapseOne\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionFlushExample\" style={mystyle}>\r\n              <div className=\"accordion-body\">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the first item's accordion body.</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\">\r\n              <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseTwo\" aria-expanded=\"false\" aria-controls=\"flush-collapseTwo\" style={mystyle}>\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div id=\"flush-collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionFlushExample\">\r\n              <div className=\"accordion-body\">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the second item's accordion body. Let's imagine this being filled with some actual content.</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\">\r\n              <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseThree\" aria-expanded=\"false\" aria-controls=\"flush-collapseThree\" style={mystyle}>\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div id=\"flush-collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionFlushExample\">\r\n              <div className=\"accordion-body\">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the third item's accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n        <button className='btn btn-primary my-3 mx-2' onClick={changeMode}>{btntext}</button>\r\n        </div>\r\n        </>\r\n      );\r\n    }\r\n  ","import React from 'react'\r\nexport default function Alert(props){\r\n    const capitalise =(word)=>{\r\n    let nwrd = word.toLowerCase();\r\n   return nwrd.at(0).toUpperCase() + nwrd.slice(1);\r\n    }\r\n    return(\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalise(props.alert.type)}</strong> :{props.alert.massage}\r\n      </div>\r\n    )\r\n}","// import logo from './logo.svg';\nimport React, { useState } from 'react'\nimport './App.css';\nimport Navbar from './templates/navbar.js'\nimport TextAreaTo from './templates/area.js';\nimport About from './templates/about.js';\nimport Alert from './templates/alert';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Routes\n} from 'react-router-dom';\nfunction App() {\n const [mode, setMode] = useState('light');\n const toggleMode = ()=>{\n  if(mode==='dark'){\n    setMode('light');\n    document.body.style.backgroundColor = \"white\";\n    showAlert('success', \"lightmode enabled\");\n   \n  }\n  else{\n    setMode('dark');\n    document.body.style.backgroundColor = \"#1d2d56\";\n    showAlert('success', \"Darkmode enabled\");\n\n    setInterval(() => {\n      document.title = \"TextUtiles is Amazing\";\n    }, 1300);\n    setInterval(() => {\n      document.title = \"TextUtiles is Perfect\";\n    }, 1000);\n  }\n }\n\n const [alert, setAlert] = useState(null);\n\n const showAlert = (alert, msg)=> {\n       setAlert({ \n        type: alert,\n        massage: msg\n       })\n       setTimeout(() => {\n        setAlert(null);\n       }, 1700);\n }\n\n  return (\n    <>\n  <Router>\n\n  <Navbar  mode={mode} toggleMode={toggleMode}/>\n  <Alert alert={alert}/>\n\n  <div className='container '>\n  <Routes>\n    <Route exact path='/about' element={<About  />}></Route>\n<Route  exact path='/' element={<TextAreaTo  mode={mode}   showAlert={showAlert}/>}></Route>   \n  </Routes>\n  </div>\n                                   \n  </Router>\n\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}